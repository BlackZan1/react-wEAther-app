{"version":3,"sources":["Weather API/App.module.css","Weather API/components/Info/Info.module.css","Weather API/components/Form/Form.module.css","Weather API/components/Weather/Weather.module.css","Weather API/components/Info/Info.jsx","Weather API/components/Form/Form.jsx","Weather API/components/Weather/Weather.jsx","Weather API/methods/Date.js","Weather API/App.js","serviceWorker.js","index.js"],"names":["module","exports","Info","className","style","InfoMain","React","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","cityName","clouds","temp","sunrise","sunset","pressure","error","getDate","ss","sr","Date","setTime","date_sunset","getHours","getMinutes","getSeconds","console","log","API_KEY","App","state","undefined","cloudiness","event","a","async","preventDefault","target","elements","city","value","fetch","API_URL","json","data","sunDate","sys","er","setState","main","weather","description","AppMain","AppItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8FACAA,EAAOC,QAAU,CAAC,QAAU,qBAAqB,QAAU,uB,kBCA3DD,EAAOC,QAAU,CAAC,SAAW,yB,gBCA7BD,EAAOC,QAAU,CAAC,KAAO,qB,gBCAzBD,EAAOC,QAAU,CAAC,QAAU,2B,4MCabC,E,iLATP,OACI,yBAAKC,UAAWC,IAAMC,UAClB,2CACA,mE,GALGC,IAAMC,W,iBCaVC,E,iLAXP,OACI,yBAAKL,UAAWC,IAAMI,MAClB,0BAAMC,SAAUC,KAAKC,MAAMC,YACvB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,6BAC3C,qD,GANDT,IAAMC,W,iBCoBVS,E,iLAlBP,OACI,yBAAKb,UAAWC,IAAMY,SAChBN,KAAKC,MAAMM,UACT,6BACI,oCAAUP,KAAKC,MAAMM,UACrB,0CAAgBP,KAAKC,MAAMO,OAAO,GAAlC,KAAwCR,KAAKC,MAAMO,OAAO,IAC1D,qDAAoBR,KAAKC,MAAMQ,KAA/B,UACA,uCAAaT,KAAKC,MAAMS,SACxB,sCAAYV,KAAKC,MAAMU,QACvB,wCAAcX,KAAKC,MAAMW,SAAzB,SAGR,2BAAIZ,KAAKC,MAAMY,Y,GAdTjB,IAAMC,WCcb,GAAEiB,QAjBD,SAACC,EAAIC,GACjB,GAAGD,GAAMC,EAAI,CACT,IAAIL,EAAS,IAAIM,KACjBN,EAAOO,QAAQH,GACf,IAAII,EAAcR,EAAOS,WAAa,IAAMT,EAAOU,aAAe,IAAMV,EAAOW,aAE/EC,QAAQC,IAAIb,EAAOS,YAEnB,IAAIV,EAAU,IAAIO,KAIlB,OAHAP,EAAQQ,QAAQF,GAGT,CAACG,EAFWT,EAAQU,WAAa,IAAMV,EAAQW,aAAe,IAAMX,EAAQY,iB,gBCHrFG,EAAU,mCA4FDC,E,2MAzFXC,MAAQ,CACJlB,UAAMmB,EACNrB,cAAUqB,EACVlB,aAASkB,EACTjB,YAAQiB,EACRhB,cAAUgB,EACVC,gBAAYD,EACZf,MAAO,oB,EAGXX,WAAa,SAAO4B,GAAP,qBAAAC,EAAAC,OAAA,mDACTF,EAAMG,mBAEA1B,EAAWuB,EAAMI,OAAOC,SAASC,KAAKC,OAHnC,mCAAAN,EAAA,MAOLO,MAAM,oDAAD,OAAqD/B,EAArD,kBAAuEkB,EAAvE,mBAPA,cAMCc,EAND,kBAAAR,EAAA,MAScQ,EAAQC,QATtB,OASCC,EATD,OAULlB,QAAQC,IAAIiB,GAERC,EAAU,GAEd,IACIA,EAAU5B,EAAQA,QAAQ2B,EAAKE,IAAIhC,OAAQ8B,EAAKE,IAAIjC,SAExD,MAAMkC,GACFF,EAAU,MAACd,OAAWA,GAGvBa,EAAKrC,KACJ,EAAKyC,SAAS,CACVpC,KAAMgC,EAAKK,KAAKrC,KAChBF,SAAUkC,EAAKrC,KACfM,QAASgC,EAAQ,GACjB/B,OAAQ+B,EAAQ,GAChB9B,SAAU6B,EAAKK,KAAKlC,SACpBiB,WAAY,CACRY,EAAKM,QAAQ,GAAGD,KAAML,EAAKM,QAAQ,GAAGC,aAE1CnC,WAAOe,IAGX,EAAKiB,SAAS,CACVpC,UAAMmB,EACNrB,cAAUqB,EACVlB,aAASkB,EACTjB,YAAQiB,EACRhB,cAAUgB,EACVC,gBAAYD,EACZf,MAAO,kCAzCV,wBA8CL,EAAKgC,SAAS,CACVpC,UAAMmB,EACNrB,cAAUqB,EACVlB,aAASkB,EACTjB,YAAQiB,EACRhB,cAAUgB,EACVC,gBAAYD,EACZf,MAAO,4BArDN,uC,wEA2DT,OACI,yBAAKpB,UAAWC,IAAMuD,SAClB,yBAAKxD,UAAWC,IAAMwD,SAClB,kBAAC,EAAD,MAEA,6BACI,kBAAC,EAAD,CAAMhD,WAAYF,KAAKE,aAEvB,kBAAC,EAAD,CAASO,KAAMT,KAAK2B,MAAMlB,KAAMF,SAAUP,KAAK2B,MAAMpB,SAC7CG,QAASV,KAAK2B,MAAMjB,QAASC,OAAQX,KAAK2B,MAAMhB,OAChDE,MAAOb,KAAK2B,MAAMd,MAAOD,SAAUZ,KAAK2B,MAAMf,SAC9CJ,OAAQR,KAAK2B,MAAME,oB,GAjFjCjC,IAAMC,WCGJsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,QD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ec14d94a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppMain\":\"App_AppMain__3daMY\",\"AppItem\":\"App_AppItem__1OZh0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"InfoMain\":\"Info_InfoMain__380F8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"Form_Form__2hD4S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Weather\":\"Weather_Weather__1bnfz\"};","import React from 'react';\r\nimport style from './Info.module.css';\r\n\r\nclass Info extends React.Component {\r\n    render () {\r\n        return (\r\n            <div className={style.InfoMain}>\r\n                <h1>Weather App</h1>\r\n                <h3>What's weather in your country</h3>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Info;","import React from 'react';\r\nimport style from './Form.module.css';\r\n\r\nclass Form extends React.Component {\r\n    render () {\r\n        return (\r\n            <div className={style.Form}>\r\n                <form onSubmit={this.props.getWeather}>\r\n                    <input type=\"text\" name=\"city\" placeholder=\"Add name of your city...\"/>\r\n                    <button>Get Weather</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Form;","import React from 'react';\r\nimport style from './Weather.module.css';\r\n\r\nclass Weather extends React.Component {\r\n    render () {\r\n        return (\r\n            <div className={style.Weather}>\r\n                { this.props.cityName && // Аналогия if для UI\r\n                    <div>\r\n                        <p>City: {this.props.cityName}</p>\r\n                        <p>Cloudiness: {this.props.clouds[0]}, {this.props.clouds[1]}</p>\r\n                        <p>Temperature: {`${this.props.temp}°C`}</p>\r\n                        <p>Sunrise: {this.props.sunrise}</p>\r\n                        <p>Sunset: {this.props.sunset}</p>\r\n                        <p>Pressure: {this.props.pressure} hpa</p>\r\n                    </div>\r\n                }\r\n                <p>{this.props.error}</p>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Weather;","const getDate = (ss, sr) => {\r\n    if(ss && sr) {\r\n        let sunset = new Date();\r\n        sunset.setTime(ss)\r\n        let date_sunset = sunset.getHours() + ':' + sunset.getMinutes() + ':' + sunset.getSeconds();\r\n\r\n        console.log(sunset.getHours());\r\n\r\n        let sunrise = new Date();\r\n        sunrise.setTime(sr)\r\n        let date_sunrise = sunrise.getHours() + ':' + sunrise.getMinutes() + ':' + sunrise.getSeconds()\r\n\r\n        return [date_sunset, date_sunrise];\r\n    }\r\n    else return;\r\n};\r\n\r\nexport default { getDate };","import React from 'react';\r\nimport Info from './components/Info/Info.jsx';\r\nimport Form from './components/Form/Form.jsx';\r\nimport Weather from './components/Weather/Weather.jsx';\r\nimport getDate from './methods/Date.js';\r\nimport style from './App.module.css';\r\n\r\nconst API_KEY = \"4c5df2547da8367d5bb73dd555e5f8e7\";\r\n\r\nclass App extends React.Component {\r\n    state = { // state как объект\r\n        temp: undefined,\r\n        cityName: undefined,\r\n        sunrise: undefined,\r\n        sunset: undefined,\r\n        pressure: undefined,\r\n        cloudiness: undefined,\r\n        error: 'Add name of city', \r\n    }\r\n\r\n    getWeather = async (event) => {\r\n        event.preventDefault();\r\n    \r\n        const cityName = event.target.elements.city.value;\r\n    \r\n        if(cityName) {\r\n            const API_URL = await \r\n            fetch(`http://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${API_KEY}&units=metric`);\r\n    \r\n            const data = await API_URL.json();\r\n            console.log(data);\r\n    \r\n            let sunDate = [];\r\n    \r\n            try {\r\n                sunDate = getDate.getDate(data.sys.sunset, data.sys.sunrise);\r\n            }\r\n            catch(er) {\r\n                sunDate = [undefined, undefined];\r\n            }\r\n    \r\n            if(data.name) {\r\n                this.setState({\r\n                    temp: data.main.temp,\r\n                    cityName: data.name,\r\n                    sunrise: sunDate[1],\r\n                    sunset: sunDate[0],\r\n                    pressure: data.main.pressure,\r\n                    cloudiness: [\r\n                        data.weather[0].main, data.weather[0].description,\r\n                    ],\r\n                    error: undefined,\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    temp: undefined,\r\n                    cityName: undefined,\r\n                    sunrise: undefined,\r\n                    sunset: undefined,\r\n                    pressure: undefined,\r\n                    cloudiness: undefined,\r\n                    error: 'Please add right name of city',\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            this.setState({\r\n                temp: undefined,\r\n                cityName: undefined,\r\n                sunrise: undefined,\r\n                sunset: undefined,\r\n                pressure: undefined,\r\n                cloudiness: undefined,\r\n                error: 'Please add name of city',\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={style.AppMain}>\r\n                <div className={style.AppItem}>\r\n                    <Info />\r\n\r\n                    <div>\r\n                        <Form getWeather={this.getWeather}/>\r\n\r\n                        <Weather temp={this.state.temp} cityName={this.state.cityName} \r\n                                sunrise={this.state.sunrise} sunset={this.state.sunset} \r\n                                error={this.state.error} pressure={this.state.pressure}\r\n                                clouds={this.state.cloudiness}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Weather API/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('app'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}